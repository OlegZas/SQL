1/11/25
/*1. Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.
Return the result table in any order.
The query result format is in the following example.*/ 
-- group by project 
SELECT project_id, round(SUM(experience_years )/COUNT(e.employee_id ),2) AS average_years 
FROM Project p 
INNER JOIN Employee e ON p.employee_id = e.employee_id
GROUP BY project_id

/*2. Write a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places. If a product does not have any sold units, its average selling price is assumed to be 0.
Return the result table in any order.
The result format is in the following example.*/
-- price * unites sold) / units 
SELECT p.product_id, IFNULL(round((sum(price * units) /sum(units)),2),0) as average_price 
FROM  prices p 
left join UnitsSold s ON p.product_id= s.product_id  AND purchase_date  between start_date AND end_date 
GROUP BY p.product_id

-- 1/12/25
/* 3. Write a solution to find the percentage of the users registered in each contest rounded to two decimals. Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order. The result format is in the following example.
*/

SELECT contest_id, ROUND(count(DISTINCT r.user_id) / (select count(u.user_id) FROM Users u) * 100,2) AS percentage
FROM USERS u
INNER JOIN REGISTER r ON u.user_id = r.user_id 
GROUP BY contest_id
ORDER BY percentage desc, contest_id asc

--1/13/25
/*1. The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.
Write a solution to find the confirmation rate of each user.
Return the result table in any order.
The result format is in the following example.*/

select s.user_id , round(sum(case when c.action = 'confirmed' then 1 else 0 end) / count(1),2) as confirmation_rate
from Confirmations c
right join Signups s on c.user_id = s.user_id
group by s.user_id

/*2. We define query quality as:The average of the ratio between query rating and its position. We also define poor query percentage as:
The percentage of all queries with rating less than 3.Write a solution to find each query_name, the quality and poor_query_percentage.
Both quality and poor_query_percentage should be rounded to 2 decimal places.
Return the result table in any order.
The result format is in the following example.*/

SELECT query_name, ROUND(sum(rating / position) / count(1),2) as quality, ROUND(SUM(case when rating < 3 then 1 else 0 end) / count(1)*100,2) as poor_query_percentage  
FROM Queries 
GROUP BY query_name

/*3
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| country       | varchar |
| state         | enum    |
| amount        | int     |
| trans_date    | date    |
+---------------+---------+
Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.
Return the result table in any order.*/


SELECT DATE_FORMAT(trans_date, '%Y-%m') as month, country, COUNT(1) AS trans_count, SUM(CASE WHEN state = 'approved' then 1 else 0 end) AS approved_count, SUM(amount) as trans_total_amount, SUM(CASE WHEN state = 'approved' then amount else 0 end) as approved_total_amount
FROM Transactions 
GROUP BY DATE_FORMAT(trans_date, '%Y - %m')  , country ;

1/15/25
/*1. Write a solution to calculate the number of unique subjects each teacher teaches in the university.
Return the result table in any order.
The result format is shown in the following example.
*/

SELECT teacher_id, COUNT(DISTINCT subject_id) AS cnt
FROM Teacher
GROUP BY teacher_id
