1/11/25
/*1. Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.
Return the result table in any order.
The query result format is in the following example.*/ 
-- group by project 
SELECT project_id, round(SUM(experience_years )/COUNT(e.employee_id ),2) AS average_years 
FROM Project p 
INNER JOIN Employee e ON p.employee_id = e.employee_id
GROUP BY project_id

/*2. Write a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places. If a product does not have any sold units, its average selling price is assumed to be 0.
Return the result table in any order.
The result format is in the following example.*/
-- price * unites sold) / units 
SELECT p.product_id, IFNULL(round((sum(price * units) /sum(units)),2),0) as average_price 
FROM  prices p 
left join UnitsSold s ON p.product_id= s.product_id  AND purchase_date  between start_date AND end_date 
GROUP BY p.product_id

-- 1/12/25
/* 3. Write a solution to find the percentage of the users registered in each contest rounded to two decimals. Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order. The result format is in the following example.
*/

SELECT contest_id, ROUND(count(DISTINCT r.user_id) / (select count(u.user_id) FROM Users u) * 100,2) AS percentage
FROM USERS u
INNER JOIN REGISTER r ON u.user_id = r.user_id 
GROUP BY contest_id
ORDER BY percentage desc, contest_id asc

--1/13/25
/*1. The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.
Write a solution to find the confirmation rate of each user.
Return the result table in any order.
The result format is in the following example.*/

select s.user_id , round(sum(case when c.action = 'confirmed' then 1 else 0 end) / count(1),2) as confirmation_rate
from Confirmations c
right join Signups s on c.user_id = s.user_id
group by s.user_id

/*2. We define query quality as:The average of the ratio between query rating and its position. We also define poor query percentage as:
The percentage of all queries with rating less than 3.Write a solution to find each query_name, the quality and poor_query_percentage.
Both quality and poor_query_percentage should be rounded to 2 decimal places.
Return the result table in any order.
The result format is in the following example.*/

SELECT query_name, ROUND(sum(rating / position) / count(1),2) as quality, ROUND(SUM(case when rating < 3 then 1 else 0 end) / count(1)*100,2) as poor_query_percentage  
FROM Queries 
GROUP BY query_name

/*3
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| country       | varchar |
| state         | enum    |
| amount        | int     |
| trans_date    | date    |
+---------------+---------+
Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.
Return the result table in any order.*/


SELECT DATE_FORMAT(trans_date, '%Y-%m') as month, country, COUNT(1) AS trans_count, SUM(CASE WHEN state = 'approved' then 1 else 0 end) AS approved_count, SUM(amount) as trans_total_amount, SUM(CASE WHEN state = 'approved' then amount else 0 end) as approved_total_amount
FROM Transactions 
GROUP BY DATE_FORMAT(trans_date, '%Y - %m')  , country ;

1/15/25
/*1. Write a solution to calculate the number of unique subjects each teacher teaches in the university.
Return the result table in any order.
The result format is shown in the following example.
*/

SELECT teacher_id, COUNT(DISTINCT subject_id) AS cnt
FROM Teacher
GROUP BY teacher_id

/*2. Write a solution to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.
Return the result table in any order.
The result format is in the following example.*/

SELECT 
    activity_date AS day, 
    COUNT(DISTINCT user_id) AS active_users
FROM 
    Activity
WHERE 
    DATEDIFF('2019-07-27', activity_date) < 30 AND DATEDIFF('2019-07-27', activity_date)>=0
GROUP BY 1

/* 1/16/25
1. Write a solution to find all the classes that have at least five students.
Return the result table in any order.
The result format is in the following example.*/

SELECT Upper(class) AS CLASS
FROM Courses
GROUP BY class
HAVING count(class) >=5 
ORDER BY count(class)

-- 2. 
/*Write a solution that will, for each user, return the number of followers.
Return the result table ordered by user_id in ascending order.
The result format is in the following example.*/

SELECT user_id, count(1) AS followers_count 
FROM Followers 
GROUP BY user_id
ORDER BY user_id ASC

--3. 
/*Write a solution to report the customer ids from the Customer table that bought all the products in the Product table.
Return the result table in any order.
The result format is in the following example.*/

# Write your MySQL query statement below

SELECT  customer_id 
FROM Customer 
GROUP BY customer_id
HAVING COUNT(distinct product_key) = (SELECT COUNT(product_key) FROM Product)

-- 4/21/2025
-- #4  Write your MySQL query statement below
/*
A single number is a number that appeared only once in the MyNumbers table.
Find the largest single number. If there is no single number, report null.
The result format is in the following example.
*/

-- 1. find  (unique)
-- 2. get max unique 

SELECT MAX(num) AS NUM      
FROM MYNUMBERS M 
WHERE NUM NOT IN (
    SELECT NUM
    FROM MYNUMBERS M2   
    GROUP BY NUM
    HAVING COUNT(NUM)>1
)

--5. # Write your MySQL query statement below
/*
Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.
For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.
For Pandas users, please note that you are supposed to modify Person in place.
After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.
The result format is in the following example.*/

DELETE p2 FROM Person p1 
JOIN Person p2 
ON p1.email = p2.email AND p1.id < p2.id;

--6. ----------DUPLICATES-----------------
CREATE SCHEMA OZPRACTICE;

CREATE TABLE OZPRACTICE.DETAILS (
    SN INT  ,
    EMPNAME STRING(25) NOT NULL,
    DEPT STRING(20) NOT NULL,
    CONTACTNO BIGINT NOT NULL,
    CITY STRING(15) NOT NULL
);
TRUNCATE TABLE OZPRACTICE.DETAILS;
INSERT INTO OZPRACTICE.DETAILS (SN,EMPNAME, DEPT, CONTACTNO, CITY)
VALUES 
    (1,'VISHAL', 'SALES', 9193458625, 'GAZIABAD'),
    (2,'VIPIN', 'MANAGER', 7352158944, 'BAREILLY'),
    (3,'ROHIT', 'IT', 7830246946, 'KANPUR'),
    (4,'RAHUL', 'MARKETING', 9635688441, 'MEERUT'),
    (5,'SANJAY', 'SALES', 9149335694, 'MORADABAD'),
    (6,'VIPIN', 'MANAGER', 7352158944, 'BAREILLY'),
    (7,'VISHAL', 'SALES', 9193458625, 'GAZIABAD'),
    (8,'AMAN', 'IT', 78359941265, 'RAMPUR');

    -- 1. FIND DUPLICATES: 
  SELECT *
  FROM OZPRACTICE.DETAILS 
  WHERE CONTACTNO IN (SELECT CONTACTNO FROM `OZPRACTICE.DETAILS` GROUP BY CONTACTNO HAVING COUNT(CONTACTNO)>1);

-- ALTERNATIVE:
SELECT EMPNAME, DEPT, CONTACTNO, CITY, COUNT(*)
FROM OZPRACTICE.DETAILS 
 GROUP BY EMPNAME, DEPT, CONTACTNO, CITY 
 HAVING COUNT(CONTACTNO)> 1;

 -- 2. DELETE DUPLICATE ROWS FROM OZPRACTICE.DETAILS 
 DELETE FROM `theta-topic-457803-u2.OZPRACTICE.DETAILS` WHERE (SN) IN ( SELECT MIN(SN) FROM `theta-topic-457803-u2`.`OZPRACTICE`.`DETAILS` GROUP BY EMPNAME, DEPT, CONTACTNO, CITY HAVING count(*) > 1 );

   SELECT *
  FROM OZPRACTICE.DETAILS ;

-- 3. Update all records from ‘GAZIABAD’ to ‘GHAZIABAD’.
UPDATE OZPRACTICE.DETAILS 
SET CITY = 'OLEGLAND'
WHERE CITY = 'GAZIABAD';

--------------------------------------------------------------------------
4/25/25
ALTER TABLE OZPRACTICE.DETAILS 
ADD COLUMN EMAIL STRING;

UPDATE OZPRACTICE.DETAILS SET EMAIL = 'MARK@GMAIL.COM' WHERE SN = 1;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'user123@yahoo.com' WHERE SN = 2;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'jane.doe42@outlook.com' WHERE SN = 3;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'alex_78@protonmail.com' WHERE SN = 4;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'coolguy999@mail.com' WHERE SN = 5;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'susan1985@live.com' WHERE SN = 6;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'techguru77@aol.com' WHERE SN = 7;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'hello.world21@icloud.com' WHERE SN = 8;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'mystery.man007@zoho.com' WHERE SN = 9;

-- Exercise 1: Extract Domain from Email
SELECT REGEXP_EXTRACT(email, r'@(.+)$') AS domain
FROM OZPRACTICE.DETAILS ;

-- 4/26/2025
/*1. If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.
The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.
Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
The result format is in the following example.*/

-- case where order_date = customer_pref_delivery_date = 'immediate' else 'scheduled'
-- Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
-- row number order by order_date .. select rn = 1 .. then count(* where rn = 1) / count(*)


WITH FILTERFIRST AS (
    SELECT *, 
           ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE ASC) AS RN 
    FROM DELIVERY 
)
SELECT ROUND(
    COUNT(CASE WHEN ORDER_DATE = customer_pref_delivery_date THEN 1 END)  
    / COUNT(*) * 100, 
    2
) AS immediate_percentage 
FROM FILTERFIRST 
WHERE RN = 1;

# 2. Write your MySQL query statement below
/*For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.
Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.
Return the result table ordered by employee_id.
The result format is in the following example.*/

SELECT E2.employee_id, E2.name, COUNT(1) AS reports_count , ROUND(SUM(E.AGE) / COUNT(E.AGE),0) AS average_age 
FROM EMPLOYEES E 
 JOIN EMPLOYEES E2 ON E2.EMPLOYEE_ID = E.REPORTS_TO
GROUP BY E2.EMPLOYEE_ID, E2.NAME
ORDER BY employee_id

-- 4/27/2025
# Write your MySQL query statement below
/*Employees can belong to multiple departments. When the employee joins other departments, they need to decide which department is their primary department. Note that when an employee belongs to only one department, their primary column is 'N'.

Write a solution to report all the employees with their primary department. For employees who belong to one department, report their only department.

Return the result table in any order.

The result format is in the following example.*/ 

with cte as (
    select employee_id, department_id, 
    row_number () over(partition by employee_id order by primary_flag asc) as rn 
    from employee e2
)

select employee_id, department_id
from cte
where rn = 1 

-- 4/28/25
# Write your MySQL query statement below
/* Report for every three line segments whether they can form a triangle.
Return the result table in any order.
The result format is in the following example.*/

SELECT *, IF (X+Y > Z AND Z + Y > X AND X+Z > Y, 'Yes', 'No') AS triangle
FROM TRIANGLE 
 
# Write your MySQL query statement below
/* Write a solution to select the product id, year, quantity, and price for the first year of every product sold. If any product is bought multiple times in its first year, return all sales separately.
Return the resulting table in any order.
The result format is in the following example.*/

-- 1. Group by product_id, having min(year)
SELECT s.product_id, s.year as first_year, s.quantity, s.price 
FROM SALES S
INNER JOIN (SELECT S2.PRODUCT_ID, MIN(S2.YEAR) AS FIRSTYEAR
            FROM SALES S2 
            GROUP BY S2.PRODUCT_ID) S2 ON S2.PRODUCT_ID = S.PRODUCT_ID AND FIRSTYEAR = S.YEAR 
-- SLOWER: 
SELECT s.product_id, s.year as first_year, s.quantity, s.price 
FROM SALES S
where s.year = (select min(s2.year)
                FROM SALES S2
                WHERE S2.PRODUCT_ID = S.PRODUCT_ID
                GROUP BY PRODUCT_ID)

-- ALTERNATIVE: 

-- I NEED TO IDENTIFY THE FIRST YEAR.. THEN PERFORM LOGIC WHERE I SELECT ALL RECORDS OF THE FIRST YEAR. 
-- PARTITION BY ID AND ORDER BY YEAR DESC SELECT RN 1... THEN JOIN THIS, AND SELECT FROM SAURCE ONLY WHERE MATCH 
WITH S AS (
SELECT PRODUCT_ID, YEAR, ROW_NUMBER () OVER(PARTITION BY PRODUCT_ID ORDER BY YEAR ASC ) AS RN
FROM SALES 
)
SELECT SA.product_id , SA.year as first_year , SA.quantity , SA.price 
FROM SALES SA
INNER JOIN S ON S.PRODUCT_ID = SA.PRODUCT_ID AND S.YEAR = SA.YEAR AND RN = 1

-- 4/29/25
/* Write a solution to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.

The result format is in the following example.*/ 

-- 1. find min(event_date) for each group (payer_id)
-- 2. round to 2 decimal
-- 3. count : case where loged in 1, else 0 
WITH FirstLogin AS (
    SELECT PLAYER_ID, MIN(EVENT_DATE) AS First_Date
    FROM ACTIVITY
    GROUP BY PLAYER_ID
),
NextDayLogin AS (
    SELECT f.PLAYER_ID
    FROM FirstLogin f
    JOIN ACTIVITY a 
      ON f.PLAYER_ID = a.PLAYER_ID 
     AND a.EVENT_DATE = DATE_ADD(f.First_Date, INTERVAL 1 DAY)
)
SELECT ROUND(COUNT(DISTINCT n.PLAYER_ID) / COUNT(DISTINCT f.PLAYER_ID), 2) AS fraction
FROM FirstLogin f
LEFT JOIN NextDayLogin n ON f.PLAYER_ID = n.PLAYER_ID;

--2. 
# Write your MySQL query statement below
/*Write a solution to fix the names so that only the first character is uppercase and the rest are lowercase.
Return the result table ordered by user_id.
The result format is in the following example.*/

SELECT user_id,CONCAT(LEFT(UPPER(NAME),1),RIGHT(LOWER(NAME), LENGTH(NAME)-1)) AS name
FROM USERS
ORDER BY user_id

5/2/25
# Write your MySQL query statement below
/*Find all numbers that appear at least three times consecutively.
Return the result table in any order.
The result format is in the following example.*/

-- num of the l.id  = num of the l.id +1 and = num l.id +2 


select distinct l.num as ConsecutiveNums 
from logs l
inner join logs c on c.id = l.id +1 and c.num = l.num 
inner join logs ct on ct.id = l.id +2 and ct.num = l.num

-- 5/4/25
# Write your MySQL query statement below
/* Find the IDs of the employees whose salary is strictly less than $30000 and whose manager left the company. When a manager leaves the company, their information is deleted from the Employees table, but the reports still have their manager_id set to the manager that left.
Return the result table ordered by employee_id.
The result format is in the following example.*/

SELECT E2.employee_id
FROM EMPLOYEES E
RIGHT JOIN EMPLOYEES E2 ON E2.MANAGER_ID = E.EMPLOYEE_ID 
WHERE e2.SALARY < 30000 AND E.EMPLOYEE_ID IS NULL AND E2.MANAGER_ID IS NOT NULL
ORDER BY E2.EMPLOYEE_ID

-- 5/5/2025
# Write your MySQL query statement below
/*Write a solution to find the patient_id, patient_name, and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.
Return the result table in any order.
The result format is in the following example.*/

SELECT patient_id, patient_name, conditions 
FROM Patients p
WHERE conditions  LIKE '% DIAB1%' OR conditions LIKE 'DIAB1%'

5/6/2025
# Write your MySQL query statement below
/*Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.
For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.
For Pandas users, please note that you are supposed to modify Person in place.
After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.
The result format is in the following example.*/ 

DELETE p1 FROM Person p1
JOIN Person p2 
ON p1.email = p2.email AND p1.id > p2.id;

5/11/25 
/*Write a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).
The result format is in the following example.*/

-- 1. SLEECT HIGHEST THEN SELECT MAX THAT IS NOT IN HIGHEST 
SELECT MAX(SALARY) AS SecondHighestSalary 
FROM EMPLOYEE E 
WHERE SALARY NOT IN (
SELECT MAX(SALARY)
FROM EMPLOYEE E )

-- 5/12/25 
/*Write a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.
Return the result table ordered by id in ascending order.
The result format is in the following example.*/

SELECT CASE 
            WHEN ID%2 = 0 THEN ID -1 
            WHEN ID%2 != 0 AND ID = (SELECT MAX(ID) FROM SEAT)THEN ID
            ELSE ID +1 
        END AS id, student
FROM SEAT S 
order by id asc

--5/14/25
# Write your MySQL query statement below
/*Write a solution to find for each date the number of different products sold and their names.
The sold products names for each date should be sorted lexicographically.
Return the result table ordered by sell_date.
The result format is in the following example.*/

SELECT sell_date, COUNT(distinct product) AS num_sold, 
       group_concat(distinct product order by product asc separator ',') as products 
FROM ACTIVITIES 
GROUP BY SELL_DATE
ORDER BY SELL_DATE, PRODUCT

5/15/25
/*Write a solution to calculate the number of bank accounts for each salary category. The salary categories are:

"Low Salary": All the salaries strictly less than $20000.
"Average Salary": All the salaries in the inclusive range [$20000, $50000].
"High Salary": All the salaries strictly greater than $50000.
The result table must contain all three categories. If there are no accounts in a category, return 0.

Return the result table in any order.

The result format is in the following example.*/
-- Fourth solution: CTE + CASE-WHEN
with CTE_Category as
(select 
case when income  < 20000 then 'Low Salary'
when income between 20000 and 50000 then 'Average Salary'
when income > 50000 then 'High Salary'
end as category, 1 count from Accounts
union all
select 'Low Salary', 0 
union all
select 'Average Salary', 0
union all
select 'High Salary', 0
)
select category, sum(count) as accounts_count from CTE_Category group by category

5/16/25
/*Write a solution to get the names of products that have at least 100 units ordered in February 2020 and their amount.
Return the result table in any order.
The result format is in the following example.*/

SELECT P.product_name, SUM(UNIT) AS unit 
FROM PRODUCTS P
INNER JOIN ORDERS O ON P.PRODUCT_ID = O.PRODUCT_ID AND EXTRACT(MONTH FROM ORDER_DATE) = 2 AND EXTRACT(YEAR FROM ORDER_DATE) = 2020
GROUP BY O.PRODUCT_ID
HAVING SUM(UNIT) >= 100

-- 5/17/25

/*
Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to  decimal places
*/

SELECT ROUND(MIN(LAT_N),4)
FROM STATION 
WHERE LAT_N > 38.7780
;

-- 5/18/25
/*There is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.
Write a solution to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.
Note that only one person can board the bus at any given turn.
The result format is in the following example.*/

-- 1000
-- sum of all < 1000
-- loop 
-- Note: groupping here makes summing q2 possible. ex: q1.trn1 will include q2. tr1,tr2,tr3,tr4 etc whose sum is up to 1000. Then ordered and limited to get 1 person. 

SELECT q.person_name
FROM QUEUE Q
INNER JOIN QUEUE Q2 ON Q.TURN >= Q2.TURN 
GROUP BY Q.TURN 
HAVING SUM(q2.WEIGHT)<=1000
ORDER BY SUM(q2.WEIGHT) desc 
LIMIT 1

-- 5/19/2025
/*
Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example. */

-- can use unions.
-- 1. user highest count 

(SELECT U.NAME AS results -- , COUNT(1)
FROM MOVIERATING M
INNER JOIN USERS U ON U.USER_ID = M.USER_ID 
GROUP BY M.USER_ID, NAME
ORDER BY COUNT(1) DESC, NAME 
LIMIT 1 )
UNION  ALL
(SELECT title       
FROM MOVIERATING M 
INNER JOIN Movies M2 ON M.MOVIE_ID = M2.MOVIE_ID 
WHERE CREATED_AT BETWEEN '2020-02-01' AND '2020-02-29'
GROUP BY M.MOVIE_ID
ORDER BY SUM(RATING) / COUNT(1) DESC, TITLE
LIMIT 1)

--5/20/25
/*Write a solution to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who:
have the same tiv_2015 value as one or more other policyholders, and
are not located in the same city as any other policyholder (i.e., the (lat, lon) attribute pairs must be unique).
Round tiv_2016 to two decimal places.
The result format is in the following example.*/

SELECT ROUND(SUM(I.TIV_2016),2) AS tiv_2016 
FROM INSURANCE I
LEFT JOIN INSURANCE I2 ON I2.LAT = I.LAT AND I2.LON = I.LON AND I2.PID != I.PID
WHERE I.TIV_2015 IN(SELECT TIV_2015 FROM INSURANCE GROUP BY TIV_2015 HAVING COUNT(1) > 1) AND I2.PID IS NULL

-- 5/21/25
# Write your MySQL query statement below
/*Write a solution to find the users who have valid emails.
A valid e-mail has a prefix name and a domain where:
The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. The prefix name must start with a letter.
The domain is '@leetcode.com'.
Return the result table in any order.
The result format is in the following example.*/
SELECT *
FROM Users
WHERE mail REGEXP '^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode[.]com';

--5/27/25
# Write your MySQL query statement below
/*Write a solution to find the users who have valid emails.
A valid e-mail has a prefix name and a domain where:
The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. The prefix name must start with a letter.
The domain is '@leetcode.com'.
Return the result table in any order.
The result format is in the following example.*/

SELECT
  *
FROM
  Users
WHERE
  mail REGEXP '^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode[.]com$';

-- 5/29/25
/*Write a solution to find the people who have the most friends and the most friends number.
The test cases are generated so that only one person has the most friends.
The result format is in the following example.
 */
SELECT 
    id,
    (IFNULL(sent_friends, 0) + IFNULL(received_friends, 0)) AS num
FROM (
    SELECT 
        id,
        SUM(CASE WHEN id = REQUESTER_ID THEN 1 ELSE 0 END) AS sent_friends,
        SUM(CASE WHEN id = ACCEPTER_ID THEN 1 ELSE 0 END) AS received_friends
    FROM (
        SELECT REQUESTER_ID AS id FROM RequestAccepted
        UNION 
        SELECT ACCEPTER_ID AS id FROM RequestAccepted
    ) AS all_ids
    LEFT JOIN RequestAccepted R
        ON R.REQUESTER_ID = id OR R.ACCEPTER_ID = id
    GROUP BY id
) AS friends_count
ORDER BY num DESC
LIMIT 1;
