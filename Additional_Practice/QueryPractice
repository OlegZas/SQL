1/11/25
/*1. Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.
Return the result table in any order.
The query result format is in the following example.*/ 
-- group by project 
SELECT project_id, round(SUM(experience_years )/COUNT(e.employee_id ),2) AS average_years 
FROM Project p 
INNER JOIN Employee e ON p.employee_id = e.employee_id
GROUP BY project_id

/*2. Write a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places. If a product does not have any sold units, its average selling price is assumed to be 0.
Return the result table in any order.
The result format is in the following example.*/
-- price * unites sold) / units 
SELECT p.product_id, IFNULL(round((sum(price * units) /sum(units)),2),0) as average_price 
FROM  prices p 
left join UnitsSold s ON p.product_id= s.product_id  AND purchase_date  between start_date AND end_date 
GROUP BY p.product_id

-- 1/12/25
/* 3. Write a solution to find the percentage of the users registered in each contest rounded to two decimals. Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order. The result format is in the following example.
*/

SELECT contest_id, ROUND(count(DISTINCT r.user_id) / (select count(u.user_id) FROM Users u) * 100,2) AS percentage
FROM USERS u
INNER JOIN REGISTER r ON u.user_id = r.user_id 
GROUP BY contest_id
ORDER BY percentage desc, contest_id asc

--1/13/25
/*1. The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.
Write a solution to find the confirmation rate of each user.
Return the result table in any order.
The result format is in the following example.*/

select s.user_id , round(sum(case when c.action = 'confirmed' then 1 else 0 end) / count(1),2) as confirmation_rate
from Confirmations c
right join Signups s on c.user_id = s.user_id
group by s.user_id

/*2. We define query quality as:The average of the ratio between query rating and its position. We also define poor query percentage as:
The percentage of all queries with rating less than 3.Write a solution to find each query_name, the quality and poor_query_percentage.
Both quality and poor_query_percentage should be rounded to 2 decimal places.
Return the result table in any order.
The result format is in the following example.*/

SELECT query_name, ROUND(sum(rating / position) / count(1),2) as quality, ROUND(SUM(case when rating < 3 then 1 else 0 end) / count(1)*100,2) as poor_query_percentage  
FROM Queries 
GROUP BY query_name

/*3
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| country       | varchar |
| state         | enum    |
| amount        | int     |
| trans_date    | date    |
+---------------+---------+
Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.
Return the result table in any order.*/


SELECT DATE_FORMAT(trans_date, '%Y-%m') as month, country, COUNT(1) AS trans_count, SUM(CASE WHEN state = 'approved' then 1 else 0 end) AS approved_count, SUM(amount) as trans_total_amount, SUM(CASE WHEN state = 'approved' then amount else 0 end) as approved_total_amount
FROM Transactions 
GROUP BY DATE_FORMAT(trans_date, '%Y - %m')  , country ;

1/15/25
/*1. Write a solution to calculate the number of unique subjects each teacher teaches in the university.
Return the result table in any order.
The result format is shown in the following example.
*/

SELECT teacher_id, COUNT(DISTINCT subject_id) AS cnt
FROM Teacher
GROUP BY teacher_id

/*2. Write a solution to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.
Return the result table in any order.
The result format is in the following example.*/

SELECT 
    activity_date AS day, 
    COUNT(DISTINCT user_id) AS active_users
FROM 
    Activity
WHERE 
    DATEDIFF('2019-07-27', activity_date) < 30 AND DATEDIFF('2019-07-27', activity_date)>=0
GROUP BY 1

/* 1/16/25
1. Write a solution to find all the classes that have at least five students.
Return the result table in any order.
The result format is in the following example.*/

SELECT Upper(class) AS CLASS
FROM Courses
GROUP BY class
HAVING count(class) >=5 
ORDER BY count(class)

-- 2. 
/*Write a solution that will, for each user, return the number of followers.
Return the result table ordered by user_id in ascending order.
The result format is in the following example.*/

SELECT user_id, count(1) AS followers_count 
FROM Followers 
GROUP BY user_id
ORDER BY user_id ASC

--3. 
/*Write a solution to report the customer ids from the Customer table that bought all the products in the Product table.
Return the result table in any order.
The result format is in the following example.*/

# Write your MySQL query statement below

SELECT  customer_id 
FROM Customer 
GROUP BY customer_id
HAVING COUNT(distinct product_key) = (SELECT COUNT(product_key) FROM Product)

-- 4/21/2025
-- #4  Write your MySQL query statement below
/*
A single number is a number that appeared only once in the MyNumbers table.
Find the largest single number. If there is no single number, report null.
The result format is in the following example.
*/

-- 1. find  (unique)
-- 2. get max unique 

SELECT MAX(num) AS NUM      
FROM MYNUMBERS M 
WHERE NUM NOT IN (
    SELECT NUM
    FROM MYNUMBERS M2   
    GROUP BY NUM
    HAVING COUNT(NUM)>1
)

--5. # Write your MySQL query statement below
/*
Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.
For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.
For Pandas users, please note that you are supposed to modify Person in place.
After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.
The result format is in the following example.*/

DELETE p2 FROM Person p1 
JOIN Person p2 
ON p1.email = p2.email AND p1.id < p2.id;

--6. ----------DUPLICATES-----------------
CREATE SCHEMA OZPRACTICE;

CREATE TABLE OZPRACTICE.DETAILS (
    SN INT  ,
    EMPNAME STRING(25) NOT NULL,
    DEPT STRING(20) NOT NULL,
    CONTACTNO BIGINT NOT NULL,
    CITY STRING(15) NOT NULL
);
TRUNCATE TABLE OZPRACTICE.DETAILS;
INSERT INTO OZPRACTICE.DETAILS (SN,EMPNAME, DEPT, CONTACTNO, CITY)
VALUES 
    (1,'VISHAL', 'SALES', 9193458625, 'GAZIABAD'),
    (2,'VIPIN', 'MANAGER', 7352158944, 'BAREILLY'),
    (3,'ROHIT', 'IT', 7830246946, 'KANPUR'),
    (4,'RAHUL', 'MARKETING', 9635688441, 'MEERUT'),
    (5,'SANJAY', 'SALES', 9149335694, 'MORADABAD'),
    (6,'VIPIN', 'MANAGER', 7352158944, 'BAREILLY'),
    (7,'VISHAL', 'SALES', 9193458625, 'GAZIABAD'),
    (8,'AMAN', 'IT', 78359941265, 'RAMPUR');

    -- 1. FIND DUPLICATES: 
  SELECT *
  FROM OZPRACTICE.DETAILS 
  WHERE CONTACTNO IN (SELECT CONTACTNO FROM `OZPRACTICE.DETAILS` GROUP BY CONTACTNO HAVING COUNT(CONTACTNO)>1);

-- ALTERNATIVE:
SELECT EMPNAME, DEPT, CONTACTNO, CITY, COUNT(*)
FROM OZPRACTICE.DETAILS 
 GROUP BY EMPNAME, DEPT, CONTACTNO, CITY 
 HAVING COUNT(CONTACTNO)> 1;

 -- 2. DELETE DUPLICATE ROWS FROM OZPRACTICE.DETAILS 
 DELETE FROM `theta-topic-457803-u2.OZPRACTICE.DETAILS` WHERE (SN) IN ( SELECT MIN(SN) FROM `theta-topic-457803-u2`.`OZPRACTICE`.`DETAILS` GROUP BY EMPNAME, DEPT, CONTACTNO, CITY HAVING count(*) > 1 );

   SELECT *
  FROM OZPRACTICE.DETAILS ;

-- 3. Update all records from ‘GAZIABAD’ to ‘GHAZIABAD’.
UPDATE OZPRACTICE.DETAILS 
SET CITY = 'OLEGLAND'
WHERE CITY = 'GAZIABAD';

--------------------------------------------------------------------------
4/25/25
ALTER TABLE OZPRACTICE.DETAILS 
ADD COLUMN EMAIL STRING;

UPDATE OZPRACTICE.DETAILS SET EMAIL = 'MARK@GMAIL.COM' WHERE SN = 1;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'user123@yahoo.com' WHERE SN = 2;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'jane.doe42@outlook.com' WHERE SN = 3;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'alex_78@protonmail.com' WHERE SN = 4;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'coolguy999@mail.com' WHERE SN = 5;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'susan1985@live.com' WHERE SN = 6;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'techguru77@aol.com' WHERE SN = 7;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'hello.world21@icloud.com' WHERE SN = 8;
UPDATE OZPRACTICE.DETAILS SET EMAIL = 'mystery.man007@zoho.com' WHERE SN = 9;

-- Exercise 1: Extract Domain from Email
SELECT REGEXP_EXTRACT(email, r'@(.+)$') AS domain
FROM OZPRACTICE.DETAILS ;

-- 4/26/2025
/*1. If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.
The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.
Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
The result format is in the following example.*/

-- case where order_date = customer_pref_delivery_date = 'immediate' else 'scheduled'
-- Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
-- row number order by order_date .. select rn = 1 .. then count(* where rn = 1) / count(*)


WITH FILTERFIRST AS (
    SELECT *, 
           ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE ASC) AS RN 
    FROM DELIVERY 
)
SELECT ROUND(
    COUNT(CASE WHEN ORDER_DATE = customer_pref_delivery_date THEN 1 END)  
    / COUNT(*) * 100, 
    2
) AS immediate_percentage 
FROM FILTERFIRST 
WHERE RN = 1;

# 2. Write your MySQL query statement below
/*For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.
Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.
Return the result table ordered by employee_id.
The result format is in the following example.*/

SELECT E2.employee_id, E2.name, COUNT(1) AS reports_count , ROUND(SUM(E.AGE) / COUNT(E.AGE),0) AS average_age 
FROM EMPLOYEES E 
 JOIN EMPLOYEES E2 ON E2.EMPLOYEE_ID = E.REPORTS_TO
GROUP BY E2.EMPLOYEE_ID, E2.NAME
ORDER BY employee_id

-- 4/27/2025
# Write your MySQL query statement below
/*Employees can belong to multiple departments. When the employee joins other departments, they need to decide which department is their primary department. Note that when an employee belongs to only one department, their primary column is 'N'.

Write a solution to report all the employees with their primary department. For employees who belong to one department, report their only department.

Return the result table in any order.

The result format is in the following example.*/ 

with cte as (
    select employee_id, department_id, 
    row_number () over(partition by employee_id order by primary_flag asc) as rn 
    from employee e2
)

select employee_id, department_id
from cte
where rn = 1 

-- 4/28/25
# Write your MySQL query statement below
/* Report for every three line segments whether they can form a triangle.
Return the result table in any order.
The result format is in the following example.*/

SELECT *, IF (X+Y > Z AND Z + Y > X AND X+Z > Y, 'Yes', 'No') AS triangle
FROM TRIANGLE 
 
# Write your MySQL query statement below
/* Write a solution to select the product id, year, quantity, and price for the first year of every product sold. If any product is bought multiple times in its first year, return all sales separately.
Return the resulting table in any order.
The result format is in the following example.*/

-- 1. Group by product_id, having min(year)
SELECT s.product_id, s.year as first_year, s.quantity, s.price 
FROM SALES S
INNER JOIN (SELECT S2.PRODUCT_ID, MIN(S2.YEAR) AS FIRSTYEAR
            FROM SALES S2 
            GROUP BY S2.PRODUCT_ID) S2 ON S2.PRODUCT_ID = S.PRODUCT_ID AND FIRSTYEAR = S.YEAR 
-- SLOWER: 
SELECT s.product_id, s.year as first_year, s.quantity, s.price 
FROM SALES S
where s.year = (select min(s2.year)
                FROM SALES S2
                WHERE S2.PRODUCT_ID = S.PRODUCT_ID
                GROUP BY PRODUCT_ID)
